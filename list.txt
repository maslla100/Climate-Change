---- START OF ./requirements.txt ----
Flask==2.0.1
gunicorn==20.1.0
SQLAlchemy==1.4.25
psycopg2-binary==2.9.1 
Pandas==1.3.3
Matplotlib==3.4.3
Plotly==5.3.1
dash==2.0.0  
---- END OF ./requirements.txt ----

---- START OF ./config/runtime.txt ----
python-3.9.6
---- END OF ./config/runtime.txt ----

---- START OF ./config/Procfile ----
web: gunicorn src.app.app:app
---- END OF ./config/Procfile ----

---- START OF ./.env ----
DATABASE_URL=postgresql://postgres:@localhost/climate_change
FLASK_ENV=development  
SECRET_KEY=your-secret-key
---- END OF ./.env ----

---- START OF ./notebooks/data_cleaning.ipynb ----
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load datasets\n",
    "global_monthly = pd.read_csv(\"../data/raw/Globalmonthlyandseasonal.csv\")\n",
    "southern_hemisphere = pd.read_csv(\"../data/raw/SouthernHemisphere.csv\")\n",
    "\n",
    "# Cleaning - handle missing values\n",
    "global_monthly.replace(\"***\", pd.NA, inplace=True)\n",
    "southern_hemisphere.replace(\"***\", pd.NA, inplace=True)\n",
    "\n",
    "# Save cleaned data\n",
    "global_monthly.to_csv(\"../data/cleaned/cleaned_globalmonthlyandseasonal.csv\", index=False)\n",
    "southern_hemisphere.to_csv(\"../data/cleaned/cleaned_southernhemisphere.csv\", index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
---- END OF ./notebooks/data_cleaning.ipynb ----

---- START OF ./notebooks/data_visualization.ipynb ----
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load cleaned data\n",
    "global_monthly = pd.read_csv('../data/cleaned/cleaned_globalmonthlyandseasonal.csv')\n",
    "\n",
    "# Plot temperature anomalies over time\n",
    "plt.plot(global_monthly['Year'], global_monthly['J-D'])\n",
    "plt.title('Global Temperature Anomalies Over Time')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Temperature Anomaly (°C)')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
---- END OF ./notebooks/data_visualization.ipynb ----

---- START OF ./src/app/app.py ----
from flask import Flask, render_template
from src.db.database import get_db
import pandas as pd

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/visualize')
def visualize():
    # Load cleaned data and generate visualizations dynamically
    global_monthly = pd.read_csv('../data/cleaned/cleaned_globalmonthlyandseasonal.csv')
    # (Insert code for visualizations here)
    return render_template('visualization.html')

if __name__ == '__main__':
    app.run(debug=True)
---- END OF ./src/app/app.py ----

---- START OF ./src/app/templates/index.html ----
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Change Impact</title>
</head>

<body>
    <h1>Welcome to the Climate Change Impact Dashboard</h1>
    <a href="/visualize">View Visualizations</a>
</body>

</html>---- END OF ./src/app/templates/index.html ----

---- START OF ./src/app/templates/visualization.html ----
---- END OF ./src/app/templates/visualization.html ----

---- START OF ./src/etl/etl_pipeline.py ----
import pandas as pd
from sqlalchemy import create_engine
import os

# Connect to the PostgreSQL database using SQLAlchemy
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:your_password@localhost/climate_change")
engine = create_engine(DATABASE_URL)

def load_data():
    # Load cleaned data
    global_monthly = pd.read_csv('../data/cleaned/cleaned_globalmonthlyandseasonal.csv')
    southern_hemisphere = pd.read_csv('../data/cleaned/cleaned_southernhemisphere.csv')

    # Load data into PostgreSQL database
    global_monthly.to_sql('global_monthly', con=engine, if_exists='replace')
    southern_hemisphere.to_sql('southern_hemisphere', con=engine, if_exists='replace')

if __name__ == "__main__":
    load_data()
---- END OF ./src/etl/etl_pipeline.py ----

---- START OF ./src/visualizations/create_visualizations.py ----
import pandas as pd
import matplotlib.pyplot as plt

# Load cleaned data
global_monthly = pd.read_csv('../data/cleaned/cleaned_globalmonthlyandseasonal.csv')

# Example: Generate a plot and save it
plt.plot(global_monthly['Year'], global_monthly['J-D'])
plt.title("Global Temperature Anomaly Over Time")
plt.xlabel("Year")
plt.ylabel("Temperature Anomaly (°C)")
plt.savefig('../docs/global_temperature_anomaly.png')
---- END OF ./src/visualizations/create_visualizations.py ----

---- START OF ./src/db/config.py ----
import os

class Config:
    SQLALCHEMY_TRACK_MODIFICATIONS = False  
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')  # This expects you to set DATABASE_URL in the .env
    DEBUG = False
    TESTING = False

class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_ECHO = True  

class ProductionConfig(Config):
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')

config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig
}
---- END OF ./src/db/config.py ----

---- START OF ./src/db/models.py ----
from sqlalchemy import Column, Integer, Float
from src.db.database import Base

class GlobalMonthly(Base):
    __tablename__ = 'global_monthly'
    
    id = Column(Integer, primary_key=True, index=True)
    year = Column(Integer)
    jan = Column(Float)
    feb = Column(Float)
    mar = Column(Float)
    apr = Column(Float)
    may = Column(Float)
    jun = Column(Float)
    jul = Column(Float)
    aug = Column(Float)
    sep = Column(Float)
    oct = Column(Float)
    nov = Column(Float)
    dec = Column(Float)
    j_d = Column(Float)  # J-D column
    d_n = Column(Float)  # D-N column
    djf = Column(Float)  # DJF column
    mam = Column(Float)  # MAM column
    jja = Column(Float)  # JJA column
    son = Column(Float)  # SON column
---- END OF ./src/db/models.py ----

---- START OF ./src/db/database.py ----
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# Pull DATABASE_URL from environment variable
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:your_password@localhost/climate_change")

# Create the database engine
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Dependency to get the DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
---- END OF ./src/db/database.py ----

