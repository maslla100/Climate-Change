---- START OF ./requirements.txt ----
Flask==2.0.1
gunicorn==20.1.0
SQLAlchemy==1.4.25
psycopg2-binary==2.9.1 
Pandas==1.3.3
Matplotlib==3.4.3
Plotly==5.3.1
dash==2.0.0  
hvplot==0.7.3
bokeh==2.4.1
---- END OF ./requirements.txt ----

---- START OF ./config/runtime.txt ----
python-3.9.6
---- END OF ./config/runtime.txt ----

---- START OF ./config/Procfile ----
web: gunicorn src.app.app:app
---- END OF ./config/Procfile ----

---- START OF ./.env ----
DATABASE_URL=postgresql://postgres:@localhost/climate_change
FLASK_ENV=development  
SECRET_KEY=your-secret-key
---- END OF ./.env ----

---- START OF ./notebooks/data_cleaning.ipynb ----
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load datasets\n",
    "global_monthly = pd.read_csv(\"../data/raw/Globalmonthlyandseasonal.csv\")\n",
    "northern_hemisphere = pd.read_csv(\"../data/raw/NorthernHemisphere.csv\")\n",
    "southern_hemisphere = pd.read_csv(\"../data/raw/SouthernHemisphere.csv\")\n",
    "zone_annual = pd.read_csv(\"../data/raw/ZoneAnnual.csv\")\n",
    "\n",
    "# Cleaning - handle missing values for all datasets\n",
    "global_monthly.replace(\"***\", pd.NA, inplace=True)\n",
    "northern_hemisphere.replace(\"***\", pd.NA, inplace=True)\n",
    "southern_hemisphere.replace(\"***\", pd.NA, inplace=True)\n",
    "zone_annual.replace(\"***\", pd.NA, inplace=True)\n",
    "\n",
    "# Additional cleaning steps if needed (e.g., data type conversions)\n",
    "\n",
    "# Save cleaned data\n",
    "global_monthly.to_csv(\"../data/cleaned/cleaned_globalmonthlyandseasonal.csv\", index=False)\n",
    "northern_hemisphere.to_csv(\"../data/cleaned/cleaned_northernhemisphere.csv\", index=False)\n",
    "southern_hemisphere.to_csv(\"../data/cleaned/cleaned_southernhemisphere.csv\", index=False)\n",
    "zone_annual.to_csv(\"../data/cleaned/cleaned_zoneannual.csv\", index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
---- END OF ./notebooks/data_cleaning.ipynb ----

---- START OF ./notebooks/data_visualization.ipynb ----
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load cleaned data\n",
    "global_monthly = pd.read_csv('../data/cleaned/cleaned_globalmonthlyandseasonal.csv')\n",
    "\n",
    "# Plot temperature anomalies over time\n",
    "plt.plot(global_monthly['Year'], global_monthly['J-D'])\n",
    "plt.title('Global Temperature Anomalies Over Time')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Temperature Anomaly (Â°C)')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
---- END OF ./notebooks/data_visualization.ipynb ----

---- START OF ./src/app/app.py ----
from flask import Flask, render_template
from sqlalchemy.orm import Session
from src.db.database import engine
from src.db.models import GlobalMonthly, NorthernHemisphere, SouthernHemisphere
import pandas as pd
import hvplot.pandas

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/visualize')
def visualize():
    # Query the GlobalMonthly, NorthernHemisphere, and SouthernHemisphere tables from the database
    with Session(engine) as session:
        global_monthly = session.query(GlobalMonthly).all()
        northern_hemisphere = session.query(NorthernHemisphere).all()
        southern_hemisphere = session.query(SouthernHemisphere).all()

    # Convert the query results to pandas DataFrames for easy plotting
    global_monthly_df = pd.DataFrame([{
        'Year': row.year, 'J-D': row.j_d
    } for row in global_monthly])

    northern_hemisphere_df = pd.DataFrame([{
        'Year': row.year, 'J-D': row.j_d
    } for row in northern_hemisphere])

    southern_hemisphere_df = pd.DataFrame([{
        'Year': row.year, 'J-D': row.j_d
    } for row in southern_hemisphere])

    # Example: Create hvPlot for Global Temperature Anomalies and save to HTML
    global_temp_plot = global_monthly_df.hvplot.line(x='Year', y='J-D', title="Global Temperature Anomalies Over Time")
    global_temp_html = global_temp_plot.to_html()

    # Render the template with the HTML interactive plots
    return render_template('visualization.html', global_temp_html=global_temp_html)

if __name__ == '__main__':
    app.run(debug=True)
---- END OF ./src/app/app.py ----

---- START OF ./src/app/templates/index.html ----
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Change Impact</title>
</head>

<body>
    <h1>Welcome to the Climate Change Impact Dashboard</h1>
    <a href="/visualize">View Visualizations</a>
</body>

</html>---- END OF ./src/app/templates/index.html ----

---- START OF ./src/app/templates/visualization.html ----
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Change Visualizations</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f9f9f9;
        }

        h1 {
            color: #333;
        }

        h2 {
            color: #666;
        }

        .visualization {
            margin-bottom: 40px;
        }

        img {
            max-width: 100%;
            height: auto;
        }
    </style>
</head>

<body>
    <h1>Climate Change Impact Visualizations</h1>

    <div class="visualization">
        <h2>1. Global Temperature Anomalies Over Time</h2>
        <img src="/static/global_temperature_anomaly.png" alt="Global Temperature Anomalies Over Time">
    </div>

    <div class="visualization">
        <h2>2. Average Monthly Temperature Anomalies</h2>
        <img src="/static/monthly_anomalies.png" alt="Average Monthly Temperature Anomalies">
    </div>

    <div class="visualization">
        <h2>3. Temperature Anomalies: Northern vs Southern Hemisphere</h2>
        <img src="/static/hemisphere_anomalies_comparison.png"
            alt="Northern vs Southern Hemisphere Temperature Anomalies">
    </div>

    <div class="visualization">
        <h2>4. Seasonal Temperature Anomalies Over Time</h2>
        <img src="/static/seasonal_anomalies.png" alt="Seasonal Temperature Anomalies Over Time">
    </div>

    <div class="visualization">
        <h2>5. Heatmap of Monthly Temperature Anomalies Over Time</h2>
        <img src="/static/monthly_anomalies_heatmap.png" alt="Heatmap of Monthly Temperature Anomalies Over Time">
    </div>

    <div class="visualization">
        <h2>6. Interactive Global Temperature Anomalies Over Time</h2>
        <div>{{ global_temp_html|safe }}</div>
    </div>


</body>

</html>---- END OF ./src/app/templates/visualization.html ----

---- START OF ./src/etl/etl_pipeline.py ----
import pandas as pd
from sqlalchemy import create_engine
import os

# Connect to PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:your_password@localhost/climate_change")
engine = create_engine(DATABASE_URL)

def load_data():
    # Load cleaned data
    global_monthly = pd.read_csv('../data/cleaned/cleaned_globalmonthlyandseasonal.csv')
    northern_hemisphere = pd.read_csv('../data/cleaned/cleaned_northernhemisphere.csv')
    southern_hemisphere = pd.read_csv('../data/cleaned/cleaned_southernhemisphere.csv')
    zone_annual = pd.read_csv('../data/cleaned/cleaned_zoneannual.csv')

    # Load data into PostgreSQL
    global_monthly.to_sql('global_monthly', con=engine, if_exists='replace')
    northern_hemisphere.to_sql('northern_hemisphere', con=engine, if_exists='replace')
    southern_hemisphere.to_sql('southern_hemisphere', con=engine, if_exists='replace')
    zone_annual.to_sql('zone_annual', con=engine, if_exists='replace')

if __name__ == "__main__":
    load_data()
---- END OF ./src/etl/etl_pipeline.py ----

---- START OF ./src/visualizations/create_visualizations.py ----
import pandas as pd
import hvplot.pandas  # Import hvplot for pandas integration
from sqlalchemy.orm import Session
from src.db.database import engine
from src.db.models import GlobalMonthly, NorthernHemisphere, SouthernHemisphere

# Query data from the database
with Session(engine) as session:
    global_monthly = session.query(GlobalMonthly).all()
    northern_hemisphere = session.query(NorthernHemisphere).all()
    southern_hemisphere = session.query(SouthernHemisphere).all()

# Convert query results to DataFrames
global_monthly_df = pd.DataFrame([{
    'Year': row.year, 'Jan': row.jan, 'Feb': row.feb, 'Mar': row.mar, 'Apr': row.apr,
    'May': row.may, 'Jun': row.jun, 'Jul': row.jul, 'Aug': row.aug, 'Sep': row.sep,
    'Oct': row.oct, 'Nov': row.nov, 'Dec': row.dec, 'J-D': row.j_d, 'D-N': row.d_n,
    'DJF': row.djf, 'MAM': row.mam, 'JJA': row.jja, 'SON': row.son
} for row in global_monthly])

northern_hemisphere_df = pd.DataFrame([{
    'Year': row.year, 'J-D': row.j_d
} for row in northern_hemisphere])

southern_hemisphere_df = pd.DataFrame([{
    'Year': row.year, 'J-D': row.j_d
} for row in southern_hemisphere])

# Visualization 1: Global Temperature Anomalies Over Time
global_temp_plot = global_monthly_df.hvplot.line(x='Year', y='J-D', title="Global Temperature Anomaly Over Time")
hvplot.save(global_temp_plot, '../src/app/static/global_temperature_anomaly.html')

# Visualization 2: Average Monthly Temperature Anomalies (Jan-Dec)
monthly_anomalies = global_monthly_df[[
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
]].mean()

monthly_plot = monthly_anomalies.hvplot.bar(title="Average Monthly Temperature Anomalies", ylabel="Temperature Anomaly (Â°C)")
hvplot.save(monthly_plot, '../src/app/static/monthly_anomalies.html')

# Visualization 3: Comparing Northern and Southern Hemisphere Anomalies
hemisphere_comparison_plot = northern_hemisphere_df.hvplot.line(x='Year', y='J-D', label='Northern Hemisphere') * \
    southern_hemisphere_df.hvplot.line(x='Year', y='J-D', color='orange', label='Southern Hemisphere', title="Northern vs Southern Hemisphere Temperature Anomalies")
hvplot.save(hemisphere_comparison_plot, '../src/app/static/hemisphere_anomalies_comparison.html')

# Visualization 4: Seasonal Temperature Anomalies Over Time (DJF, MAM, JJA, SON)
seasonal_plot = global_monthly_df.hvplot.line(x='Year', y=['DJF', 'MAM', 'JJA', 'SON'], title="Seasonal Temperature Anomalies Over Time")
hvplot.save(seasonal_plot, '../src/app/static/seasonal_anomalies.html')

# Visualization 5: Heatmap of Monthly Temperature Anomalies Over Time
monthly_anomalies_df = global_monthly_df.set_index('Year')[['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']]
heatmap_plot = monthly_anomalies_df.hvplot.heatmap(cmap='coolwarm', title="Heatmap of Monthly Temperature Anomalies Over Time")
hvplot.save(heatmap_plot, '../src/app/static/monthly_anomalies_heatmap.html')
---- END OF ./src/visualizations/create_visualizations.py ----

---- START OF ./src/db/config.py ----
import os

class Config:
    SQLALCHEMY_TRACK_MODIFICATIONS = False  
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')  # This expects you to set DATABASE_URL in the .env
    DEBUG = False
    TESTING = False

class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_ECHO = True  

class ProductionConfig(Config):
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')

config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig
}
---- END OF ./src/db/config.py ----

---- START OF ./src/db/models.py ----
from sqlalchemy import Column, Integer, Float
from src.db.database import Base

class GlobalMonthly(Base):
    __tablename__ = 'global_monthly'
    id = Column(Integer, primary_key=True, index=True)
    year = Column(Integer, nullable=False, index=True)
    jan = Column(Float, nullable=True)
    feb = Column(Float, nullable=True)
    mar = Column(Float, nullable=True)
    apr = Column(Float, nullable=True)
    may = Column(Float, nullable=True)
    jun = Column(Float, nullable=True)
    jul = Column(Float, nullable=True)
    aug = Column(Float, nullable=True)
    sep = Column(Float, nullable=True)
    oct = Column(Float, nullable=True)
    nov = Column(Float, nullable=True)
    dec = Column(Float, nullable=True)
    j_d = Column(Float, nullable=True)  # J-D column
    d_n = Column(Float, nullable=True)  # D-N column
    djf = Column(Float, nullable=True)  # DJF column
    mam = Column(Float, nullable=True)  # MAM column
    jja = Column(Float, nullable=True)  # JJA column
    son = Column(Float, nullable=True)  # SON column

class NorthernHemisphere(Base):
    __tablename__ = 'northern_hemisphere'
    id = Column(Integer, primary_key=True, index=True)
    year = Column(Integer, nullable=False, index=True)
    jan = Column(Float, nullable=True)
    feb = Column(Float, nullable=True)
    mar = Column(Float, nullable=True)
    apr = Column(Float, nullable=True)
    may = Column(Float, nullable=True)
    jun = Column(Float, nullable=True)
    jul = Column(Float, nullable=True)
    aug = Column(Float, nullable=True)
    sep = Column(Float, nullable=True)
    oct = Column(Float, nullable=True)
    nov = Column(Float, nullable=True)
    dec = Column(Float, nullable=True)
    j_d = Column(Float, nullable=True)  # J-D column
    d_n = Column(Float, nullable=True)  # D-N column
    djf = Column(Float, nullable=True)  # DJF column
    mam = Column(Float, nullable=True)  # MAM column
    jja = Column(Float, nullable=True)  # JJA column
    son = Column(Float, nullable=True)  # SON column

class SouthernHemisphere(Base):
    __tablename__ = 'southern_hemisphere'
    id = Column(Integer, primary_key=True, index=True)
    year = Column(Integer, nullable=False, index=True)
    jan = Column(Float, nullable=True)
    feb = Column(Float, nullable=True)
    mar = Column(Float, nullable=True)
    apr = Column(Float, nullable=True)
    may = Column(Float, nullable=True)
    jun = Column(Float, nullable=True)
    jul = Column(Float, nullable=True)
    aug = Column(Float, nullable=True)
    sep = Column(Float, nullable=True)
    oct = Column(Float, nullable=True)
    nov = Column(Float, nullable=True)
    dec = Column(Float, nullable=True)
    j_d = Column(Float, nullable=True)  # J-D column
    d_n = Column(Float, nullable=True)  # D-N column
    djf = Column(Float, nullable=True)  # DJF column
    mam = Column(Float, nullable=True)  # MAM column
    jja = Column(Float, nullable=True)  # JJA column
    son = Column(Float, nullable=True)  # SON column

class ZoneAnnual(Base):
    __tablename__ = 'zone_annual'
    id = Column(Integer, primary_key=True, index=True)
    year = Column(Integer, nullable=False, index=True)
    jan = Column(Float, nullable=True)
    feb = Column(Float, nullable=True)
    mar = Column(Float, nullable=True)
    apr = Column(Float, nullable=True)
    may = Column(Float, nullable=True)
    jun = Column(Float, nullable=True)
    jul = Column(Float, nullable=True)
    aug = Column(Float, nullable=True)
    sep = Column(Float, nullable=True)
    oct = Column(Float, nullable=True)
    nov = Column(Float, nullable=True)
    dec = Column(Float, nullable=True)
    j_d = Column(Float, nullable=True)  # J-D column
    d_n = Column(Float, nullable=True)  # D-N column
    djf = Column(Float, nullable=True)  # DJF column
    mam = Column(Float, nullable=True)  # MAM column
    jja = Column(Float, nullable=True)  # JJA column
    son = Column(Float, nullable=True)  # SON column
---- END OF ./src/db/models.py ----

---- START OF ./src/db/database.py ----
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# Pull DATABASE_URL from environment variable
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:your_password@localhost/climate_change")

# Create the database engine
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Dependency to get the DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
---- END OF ./src/db/database.py ----

